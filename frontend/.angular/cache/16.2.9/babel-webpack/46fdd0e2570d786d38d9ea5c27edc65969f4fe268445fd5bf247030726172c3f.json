{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TeamService {\n  constructor() {\n    this.teams = [];\n    this.assignedUsers = new Set();\n  }\n  createTeam(users) {\n    const uniqueDomains = new Set();\n    const team = {\n      id: this.teams.length + 1,\n      name: 'Team ' + (this.teams.length + 1),\n      users: []\n    };\n    users.forEach(user => {\n      if (!this.assignedUsers.has(user.id) && !uniqueDomains.has(user.domain)) {\n        uniqueDomains.add(user.domain);\n        team.users.push(user);\n        this.assignedUsers.add(user.id);\n      }\n    });\n    this.teams.push(team);\n    return team;\n  }\n  getTeams() {\n    return this.teams;\n  }\n  static #_ = this.ɵfac = function TeamService_Factory(t) {\n    return new (t || TeamService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TeamService,\n    factory: TeamService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TeamService","constructor","teams","assignedUsers","Set","createTeam","users","uniqueDomains","team","id","length","name","forEach","user","has","domain","add","push","getTeams","_","_2","factory","ɵfac","providedIn"],"sources":["F:\\task-1\\frontend\\src\\app\\service\\team.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BlogPostItem } from '../blog/BlogPostItem';\r\nimport { Team } from '../teams/team.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TeamService {\r\n  private teams: Team[] = [];\r\n  private assignedUsers: Set<string> = new Set<string>();\r\n\r\n  createTeam(users: BlogPostItem[]): Team {\r\n    const uniqueDomains = new Set<string>();\r\n    const team: Team = { id: this.teams.length + 1, name: 'Team ' + (this.teams.length + 1), users: [] };\r\n\r\n    users.forEach((user:any) => {\r\n      if (!this.assignedUsers.has(user.id) && !uniqueDomains.has(user.domain)) {\r\n        uniqueDomains.add(user.domain);\r\n        team.users.push(user);\r\n        this.assignedUsers.add(user.id);\r\n      }\r\n    });\r\n\r\n    this.teams.push(team);\r\n    return team;\r\n  }\r\n\r\n  getTeams(): Team[] {\r\n    return this.teams;\r\n  }\r\n}\r\n\r\n"],"mappings":";AAOA,OAAM,MAAOA,WAAW;EAHxBC,YAAA;IAIU,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,aAAa,GAAgB,IAAIC,GAAG,EAAU;;EAEtDC,UAAUA,CAACC,KAAqB;IAC9B,MAAMC,aAAa,GAAG,IAAIH,GAAG,EAAU;IACvC,MAAMI,IAAI,GAAS;MAAEC,EAAE,EAAE,IAAI,CAACP,KAAK,CAACQ,MAAM,GAAG,CAAC;MAAEC,IAAI,EAAE,OAAO,IAAI,IAAI,CAACT,KAAK,CAACQ,MAAM,GAAG,CAAC,CAAC;MAAEJ,KAAK,EAAE;IAAE,CAAE;IAEpGA,KAAK,CAACM,OAAO,CAAEC,IAAQ,IAAI;MACzB,IAAI,CAAC,IAAI,CAACV,aAAa,CAACW,GAAG,CAACD,IAAI,CAACJ,EAAE,CAAC,IAAI,CAACF,aAAa,CAACO,GAAG,CAACD,IAAI,CAACE,MAAM,CAAC,EAAE;QACvER,aAAa,CAACS,GAAG,CAACH,IAAI,CAACE,MAAM,CAAC;QAC9BP,IAAI,CAACF,KAAK,CAACW,IAAI,CAACJ,IAAI,CAAC;QACrB,IAAI,CAACV,aAAa,CAACa,GAAG,CAACH,IAAI,CAACJ,EAAE,CAAC;;IAEnC,CAAC,CAAC;IAEF,IAAI,CAACP,KAAK,CAACe,IAAI,CAACT,IAAI,CAAC;IACrB,OAAOA,IAAI;EACb;EAEAU,QAAQA,CAAA;IACN,OAAO,IAAI,CAAChB,KAAK;EACnB;EAAC,QAAAiB,CAAA,G;qBAtBUnB,WAAW;EAAA;EAAA,QAAAoB,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}
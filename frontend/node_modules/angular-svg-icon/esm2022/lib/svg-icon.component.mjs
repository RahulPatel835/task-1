import { Component, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./svg-icon-registry.service";
class SvgIconHelper {
    constructor() {
        this.loaded = false;
    }
}
class SvgIconComponent {
    // Adapted from ngStyle (see:  angular/packages/common/src/directives/ng_style.ts)
    set svgStyle(values) {
        this._svgStyle = values;
        if (!this.helper.differ && values) {
            this.helper.differ = this.differs.find(values).create();
        }
    }
    constructor(element, differs, renderer, iconReg, cdr) {
        this.element = element;
        this.differs = differs;
        this.renderer = renderer;
        this.iconReg = iconReg;
        this.cdr = cdr;
        this.stretch = false;
        this.applyClass = false;
        /** @deprecated since 9.1.0 */
        this.applyCss = false;
        this.helper = new SvgIconHelper();
        this._svgStyle = null;
    }
    ngOnInit() {
        this.init();
    }
    ngOnDestroy() {
        this.destroy();
    }
    ngOnChanges(changeRecord) {
        const elemSvg = this.element.nativeElement.firstChild;
        if (changeRecord.src || changeRecord.name) {
            if (this.helper.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.stretch) {
            this.stylize();
        }
        if (changeRecord.applyClass) {
            if (this.applyClass) {
                this.setClass(elemSvg, null, this.klass);
            }
            else {
                this.setClass(elemSvg, this.klass, null);
            }
        }
        if (changeRecord.svgClass) {
            this.setClass(elemSvg, changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);
        }
        if (changeRecord.klass) {
            const elem = this.element.nativeElement;
            this.setClass(elem, changeRecord.klass.previousValue, changeRecord.klass.currentValue);
            if (this.applyClass) {
                this.setClass(elemSvg, changeRecord.klass.previousValue, changeRecord.klass.currentValue);
            }
            else {
                this.setClass(elemSvg, changeRecord.klass.previousValue, null);
            }
        }
        if (changeRecord.viewBox) {
            if (this.helper.loaded) {
                this.destroy();
            }
            this.init();
        }
        if (changeRecord.applyCss) {
            console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');
            console.warn('use applyClass instead');
        }
        if (changeRecord.svgAriaLabel) {
            this.doAria(changeRecord.svgAriaLabel.currentValue);
        }
    }
    ngDoCheck() {
        if (this.helper.svg && this.helper.differ) {
            const changes = this.helper.differ.diff(this._svgStyle);
            if (changes) {
                this.applyChanges(changes);
            }
        }
    }
    init() {
        if (this.name) {
            const svgObs = this.iconReg.getSvgByName(this.name);
            if (svgObs) {
                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));
            }
        }
        else if (this.src) {
            const svgObs = this.iconReg.loadSvg(this.src);
            if (svgObs) {
                this.helper.icnSub = svgObs.subscribe(svg => this.initSvg(svg));
            }
        }
        else {
            const elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.cdr.markForCheck();
        }
    }
    initSvg(svg) {
        if (!this.helper.loaded && svg) {
            this.setSvg(svg);
            this.resetDiffer();
        }
    }
    destroy() {
        if (this.helper.icnSub) {
            this.helper.icnSub.unsubscribe();
        }
        this.helper = new SvgIconHelper();
    }
    resetDiffer() {
        if (this._svgStyle && !this.helper.differ) {
            this.helper.differ = this.differs.find(this._svgStyle).create();
        }
    }
    setSvg(svg) {
        if (!this.helper.loaded && svg) {
            this.helper.svg = svg;
            const icon = svg.cloneNode(true);
            const elem = this.element.nativeElement;
            elem.innerHTML = '';
            this.renderer.appendChild(elem, icon);
            this.helper.loaded = true;
            this.copyNgContentAttribute(elem, icon);
            if (this.klass && this.applyClass) {
                this.setClass(elem.firstChild, null, this.klass);
            }
            if (this.svgClass) {
                this.setClass(elem.firstChild, null, this.svgClass);
            }
            if (this.viewBox) {
                if (this.viewBox === 'auto') {
                    // Attempt to convert height & width to a viewBox.
                    const w = icon.getAttribute('width');
                    const h = icon.getAttribute('height');
                    if (h && w) {
                        const vb = `0 0 ${w} ${h}`;
                        this.renderer.setAttribute(icon, 'viewBox', vb);
                        this.renderer.removeAttribute(icon, 'width');
                        this.renderer.removeAttribute(icon, 'height');
                    }
                }
                else if (this.viewBox !== '') {
                    this.renderer.setAttribute(icon, 'viewBox', this.viewBox);
                    this.renderer.removeAttribute(icon, 'width');
                    this.renderer.removeAttribute(icon, 'height');
                }
            }
            this.stylize();
            // If there is not a svgAriaLabel and the SVG has an arial-label, then do not override
            // the SVG's aria-label.
            if (!(this.svgAriaLabel === undefined && elem.firstChild.hasAttribute('aria-label'))) {
                this.doAria(this.svgAriaLabel || '');
            }
            this.cdr.markForCheck();
        }
    }
    copyNgContentAttribute(hostElem, icon) {
        const attributes = hostElem.attributes;
        const len = attributes.length;
        for (let i = 0; i < len; i += 1) {
            const attribute = attributes.item(i);
            if (attribute && attribute.name.startsWith('_ngcontent')) {
                this.setNgContentAttribute(icon, attribute.name);
                break;
            }
        }
    }
    setNgContentAttribute(parent, attributeName) {
        this.renderer.setAttribute(parent, attributeName, '');
        const len = parent.childNodes.length;
        for (let i = 0; i < len; i += 1) {
            const child = parent.childNodes[i];
            if (child instanceof Element) {
                this.setNgContentAttribute(child, attributeName);
            }
        }
    }
    stylize() {
        if (this.helper.svg) {
            const svg = this.element.nativeElement.firstChild;
            if (this.stretch === true) {
                this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
            }
            else if (this.stretch === false) {
                this.renderer.removeAttribute(svg, 'preserveAspectRatio');
            }
        }
    }
    applyChanges(changes) {
        changes.forEachRemovedItem((record) => this.setStyle(record.key, null));
        changes.forEachAddedItem((record) => this.setStyle(record.key, record.currentValue));
        changes.forEachChangedItem((record) => this.setStyle(record.key, record.currentValue));
    }
    setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value !== null && unit ? `${value}${unit}` : value;
        const svg = this.element.nativeElement.firstChild;
        if (value !== null) {
            this.renderer.setStyle(svg, name, value);
        }
        else {
            this.renderer.removeStyle(svg, name);
        }
    }
    setClass(target, previous, current) {
        if (target) {
            if (previous) {
                const klasses = (Array.isArray(previous) ? previous : previous.split(' ')).filter((klass) => klass);
                for (const k of klasses) {
                    this.renderer.removeClass(target, k);
                }
            }
            if (current) {
                const klasses = (Array.isArray(current) ? current : current.split(' ')).filter((klass) => klass);
                for (const k of klasses) {
                    this.renderer.addClass(target, k);
                }
            }
        }
    }
    doAria(label) {
        const svg = this.element.nativeElement.firstChild;
        if (svg) {
            if (label === '') {
                this.renderer.setAttribute(svg, 'aria-hidden', 'true');
                this.renderer.removeAttribute(svg, 'aria-label');
            }
            else {
                this.renderer.removeAttribute(svg, 'aria-hidden');
                this.renderer.setAttribute(svg, 'aria-label', label);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SvgIconComponent, deps: [{ token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: i0.Renderer2 }, { token: i1.SvgIconRegistryService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.0", type: SvgIconComponent, isStandalone: true, selector: "svg-icon", inputs: { src: "src", name: "name", stretch: "stretch", applyClass: "applyClass", applyCss: "applyCss", svgClass: "svgClass", klass: ["class", "klass"], viewBox: "viewBox", svgAriaLabel: "svgAriaLabel", svgStyle: "svgStyle" }, usesOnChanges: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, dependencies: [{ kind: "ngmodule", type: CommonModule }] }); }
}
export { SvgIconComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: SvgIconComponent, decorators: [{
            type: Component,
            args: [{
                    standalone: true,
                    imports: [CommonModule],
                    selector: 'svg-icon',
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: i0.Renderer2 }, { type: i1.SvgIconRegistryService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { src: [{
                type: Input
            }], name: [{
                type: Input
            }], stretch: [{
                type: Input
            }], applyClass: [{
                type: Input
            }], applyCss: [{
                type: Input
            }], svgClass: [{
                type: Input
            }], klass: [{
                type: Input,
                args: ['class']
            }], viewBox: [{
                type: Input
            }], svgAriaLabel: [{
                type: Input
            }], svgStyle: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,